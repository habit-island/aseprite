name: build-with-ui-and-skia
on: [push, workflow_dispatch]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        build_type: [Release]
        arch: [x64, arm64]
        enable_ui: [on]
        exclude:
          - os: windows-latest
            arch: arm64
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
      if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      with:
        key: ${{ matrix.os }}-${{ matrix.enable_ui }}-${{ matrix.build_type }}
    - uses: turtlesec-no/get-ninja@main
    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
    - name: Workaround for windows-2022 and cmake 3.25.0
      if: runner.os == 'Windows'
      shell: bash
      run: rm -rf C:/Strawberry/
    - name: Install Dependencies
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          sudo apt-get update -qq
          sudo apt-get install -y \
            libx11-dev libxcursor-dev libxi-dev
        fi
    - name: Download Skia
      shell: bash
      run: |
        curl -o skia.zip -L https://github.com/aseprite/skia/releases/latest/download/Skia-${{ runner.os }}-${{ matrix.build_type }}-${{ matrix.arch }}.zip
        unzip skia.zip -d skia
    - name: Generating Makefiles
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          export enable_ccache=off
          export libskianame=skia.lib
          export macos_cmake_arch_str=""
        else
          export enable_ccache=on
          export libskianame=libskia.a
          if [[ "${{ matrix.arch }}" == "x64" ]] ; then
            export macos_cmake_arch_str="-DCMAKE_OSX_ARCHITECTURES=x86_64"
          else
            export macos_cmake_arch_str="-DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }}"
          fi
        fi
        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          $macos_cmake_arch_str \
          -DLAF_BACKEND=skia \
          -DSKIA_DIR=skia \
          -DSKIA_LIBRARY_DIR=skia/out/${{ matrix.build_type }}-${{ matrix.arch }} \
          -DSKIA_LIBRARY=skia/out/${{ matrix.build_type }}-${{ matrix.arch }}/$libskianame \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
          -DENABLE_TESTS=ON \
          -DENABLE_UI=${{ matrix.enable_ui }} \
          -DENABLE_CCACHE=$enable_ccache
    - name: Compiling
      shell: bash
      run: |
        cd build && ninja
    - name: Running C++ Tests
      if: ${{ !(runner.os == 'macOS' && matrix.arch == 'arm64') }}
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          export XVFB=xvfb-run
        fi
        cd build && $XVFB ctest --output-on-failure
    - name: Running CLI Tests
      if: ${{ !(runner.os == 'macOS' && matrix.arch == 'arm64') }}
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          export XVFB=xvfb-run
        fi
        export ASEPRITE=$PWD/build/bin/aseprite
        cd tests
        $XVFB bash run-tests.sh
    - name: Uploading Artifact
      uses: actions/upload-artifact@v3
      with:
        name: Aseprite-${{ runner.os }}-${{ matrix.build_type }}-${{ matrix.arch }}
        path: |
          build/aseprite*
          build/data
